##################################################################################
#  Script: ansible-playbook.ps1
#  Purpose: Script to execute api call against the aap-controller.
#  Description: Used during ami builds to register the temporary ec2 instance
#               with aap-controller, execute ansible base module run against
#               the specified role, and clean the ami before ami creation.
#
#  CHANGE LOG - (add new entries to the top)
#  Date       Coder        Description
#  ------------------------------------------------------------------------------
#  06/13/2022 a1060612     Initial coding.
###################################################################################

#Adding the certification policy type from builtin libraries
Add-Type @"
using System.Net;
using System.Security.Cryptography.X509Certificates;
public class TrustAllCertsPolicy : ICertificatePolicy {
public bool CheckValidationResult(
ServicePoint srvPoint, X509Certificate certificate,
WebRequest request, int certificateProblem) {
return true;
}
}
"@

#Binding the Certificate policy to the powershell. This will ignore invalid certification errors generated by the api calls made further in the script
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy

#=================================================Essential Variables =================================================#
<#
Get-Secret
Gets the ansible token from Key Vault
#>
function Get-Secret {
    param([Parameter(Mandatory=$false)]
    [string]$SecretId="arn:aws:secretsmanager:us-east-1:735193432042:secret:ansible/pr/api-token-jjxqiR")

    try{
        $data=Get-SECSecretValue -SecretId $SecretId -ErrorAction Stop
        $Token="Bearer "+ $data.SecretString
        return $Token
    }
    catch{
        Write-Error "ERROR: Could not get Token for given secret Id: $($_.Exception.Message)"
        exit 1
    }
}

<#
Get-EC2InstanceDetails
This function returns the hostname and the instance_id of the EC2 instance the script is running on
.PARAMETERS
NONE
SYNTAX
Get-EC2InstanceDetails
.OUTPUT
Returns an object with EC2 instance hostname and instance id
#>
function  Get-EC2InstanceDetails {
    #Access Token
    $access_Token=$(Invoke-RestMethod -Method PUT -Uri "http://169.254.169.254/latest/api/token" -Headers @{"X-aws-ec2-metadata-token-ttl-seconds" = 21600})

    #Hostname of the machine
    $hostname=(Invoke-RestMethod -Headers @{"X-aws-ec2-metadata-token" = $access_token} -Method GET -Uri 'http://169.254.169.254/latest/meta-data/hostname')

    #Get the Instance Id
    $instance_id=$(Invoke-RestMethod -Method GET -Headers @{ "X-aws-ec2-metadata-token"= $access_token} -Uri "http://169.254.169.254/latest/meta-data/instance-id")

    return [pscustomobject]@{
    EC2_HostName=$hostname
    EC2_Instance_Id=$instance_id
    }
}

<#
Add-EC2ToInventory
Adds the EC2 instance to the given Ansible inventory
.PARAMETER Controller
The ansible controller to be used
.PARAMETER Inventory
The Ansible inventory where the instance will be added
.PARAMETER Token
The Bearer Token to be used for executing the api call
#>
function Add-EC2ToInventory {
param([Parameter(Mandatory)]
      [string]$Controller,
      [Parameter(Mandatory)]
      [string]$Inventory,
      [Parameter(Mandatory)]
      [string]$Token,
      [Parameter(Mandatory)]
      $HostDetail
)
    Write-Host "Adding $($HostDetail.EC2_HostName) to ${Inventory}..."

    #Headers for the curl request
    $header1= "Content-Type: application/json"
    $header2="Authorization: ${Token}"
    
    #Creating the request body
    $Props=@{
        name=$($HostDetail.EC2_Hostname)
        description="Temporary ec2 used during ami build."
        enabled=$true
        instance_id=$($HostDetail.EC2_Instance_Id)
        inventory=$Inventory
        variables=""
    }
    $body=$props | ConvertTo-Json
    $payload=$body.replace('"','\"')
    
    #Getting the Inventory Name in the Format to be used with url. Spaces in the name will be replaced by %20
    $queryString=$Inventory  -replace " ","%20"
    
    #ANSIBLE INVENTORY API
    $ANSIBLE_INVENTORIES_API="/api/v2/inventories"

    #Get the Inventory host api
    $inventory_api="https://${Controller}${ANSIBLE_INVENTORIES_API}?name=${queryString}"
    $inventory_hosts_api=$(curl.exe -s -k -L --header $header1 --header $header2 -X GET "${inventory_api}" | ConvertFrom-Json).Results.Related.Hosts
    Write-Host "Inventory Hosts API: ${inventory_hosts_api}"

    #Register the host to the inventory
    curl.exe -s -k -L --header $header1 --header $header2 -X POST "https://${Controller}${inventory_hosts_api}" -d $payload 
}


<#
Remove-EC2FromInventory
Remove the EC2 instance from the given Ansible inventory
.PARAMETER Controller
The ansible controller to be used
.PARAMETER Inventory
The Ansible inventory where the instance will be added
.PARAMETER Token
The Bearer Token to be used for executing the api call
#>
function RemoveEC2From-Inventory {
param([Parameter(Mandatory)]
      [string]$Controller,
      [Parameter(Mandatory)]
      [string]$Inventory,
      [Parameter(Mandatory)]
      [string]$Token,
      [Parameter(Mandatory)]
      $HostDetail
)
    Write-Host "Removing $($HostDetail.EC2_HostName) from ${Inventory}..."

    #Headers for the curl request
    $header1= "Content-Type: application/json"
    $header2="Authorization: ${Token}"

    #Getting the Inventory Name in the Format to be used with url. Spaces in the name will be replaced by %20
    $queryString=$Inventory  -replace " ","%20"

    #ANSIBLE INVENTORY API
    $ANSIBLE_INVENTORIES_API="/api/v2/inventories"

    #Get the Inventory host api
    $inventory_api="https://${Controller}${ANSIBLE_INVENTORIES_API}?name=${queryString}"
    $inventory_hosts_api=$(curl.exe -s -k -L --header $header1 --header $header2 -X GET "${inventory_api}" | ConvertFrom-Json).Results.Related.Hosts
    Write-Host "Inventory Hosts API: ${inventory_hosts_api}"

    #Get the inventory Id of the host
    $inventory_id=$(curl.exe -s -k -L --header $header1 --header $header2 -X GET "https://${Controller}${inventory_hosts_api}" | ConvertFrom-Json).Results | Where-Object {$_.Name -eq $HostDetail.EC2_HostName} | Select-Object -ExpandProperty Id
    Write-Host "Inventory id: ${inventory_id}"

    #Creating the request body
    $Props=@{
        id=$inventory_id
        disassociate=$true
    }
    $body=$props | ConvertTo-Json
    $payload=$body.replace('"','\"')

    #Unregister the host from the inventory
    curl.exe -s -k -L --header $header1 --header $header2 -X POST "https://${Controller}${inventory_hosts_api}" -d $payload 
}

<#
Add-EC2ToInventoryGroup
.SYNOPSIS
Adds the EC2 host to the platform group
.DESCRIPTION
Adds the EC2 Host to the ansible platform group based on OS type. Accepts ansible Controller, Ansible Inventory, Access Token and Platform Name as parameters.
.PARAMETER Controller
The ansible controller to be used
.PARAMETER Inventory
The Ansible inventory where the instance will be added
.PARAMETER Token
The Bearer Token to be used for executing the api call
.PARAMETER Platform
OS Platform to be used. this will be used to determine the ansible group, where host will be placed
USAGE:
Add-EC2ToInventoryGroup -Controller <ansibleController> -Inventory <AnsibleInventory> -Token <Bearer TOken> -Platform <Windows>
#>
function Add-EC2ToInventoryGroup {
 param(
      [Parameter(Mandatory)]
      [string]$Controller,
      [Parameter(Mandatory)]
      [string]$Inventory,
      [Parameter(Mandatory)]
      [string]$Token,
      [Parameter(Mandatory=$false)]
      [string]$Platform="windows",
      [Parameter(Mandatory)]
      $HostDetail
)
  #Ansible Groups API endpoint
  $ANSIBLE_GROUPS_API="/api/v2/groups"

  Write-Host "Adding $($HostDetail.EC2_Hostname) to ${Inventory} group..."

  #curl request headers
  $header1= "Content-Type: application/json"
  $header2="Authorization: ${Token}"

  # Retrieve associated groups api path.
  $groups_api="https://${Controller}${ANSIBLE_GROUPS_API}?name=platform_${Platform}"
  $groups_hosts_api=$(curl.exe -s -k -L --header $header1 --header $header2 -X GET "${groups_api}") | ConvertFrom-Json
  $groups_hosts_api=($groups_hosts_api.results | Where-Object {$_.Summary_fields.inventory.Name -eq $Inventory}).related.hosts
  Write-Host "Groups Hosts API: ${groups_hosts_api}"

  # Add ec2 to group
  $body=@{
    name=$HostDetail.EC2_HostName
  }
  $body=$body | ConvertTo-Json
  $payload=$body.replace('"','\"')

  curl.exe -s -k -L --header $header1 --header $header2 -X POST "https://${Controller}${groups_hosts_api}" -d $payload
}


function Execute-AnsiblePlaybook {
param(
      [Parameter(Mandatory)]
      [string]$Controller,
      [Parameter(Mandatory)]
      [string]$Inventory,
      [Parameter(Mandatory)]
      [string]$Token,
      [Parameter(Mandatory=$false)]
      [string]$Platform="windows",
      [Parameter(Mandatory)]
      [string]$Role,
      [Parameter(Mandatory)]
      $HostDetail
)

      #form the template name
      $template="${Role}-${Platform}-template".tolower()

      #Curl request headers
      $header1= "Content-Type: application/json"
      $header2="Authorization: ${Token}"

      $ANSIBLE_JOB_TEMPLATES_API="/api/v2/job_templates"
      $ANSIBLE_JOBS_API="/api/v2/jobs"

      $templates_api="https://${Controller}${ANSIBLE_JOB_TEMPLATES_API}?name=${template}"
      $templates_launch_api=$(curl.exe -s -k -L --header $header1 --header $header2 -X GET "${templates_api}"| Convertfrom-Json).Results.Related.Launch 
      Write-Host "Template Launch API: ${templates_launch_api}"

      $body=@{
      limit=$HostDetail.EC2_HostName
      extra_vars=@{
            base_ami_build=$true
            ansible_user="Administrator"
            ansible_password=$env:admin_password
        }
      } | ConvertTo-Json
      $payload=$body.replace('"','\"')

      #Number of times to retry the job
      $attempt=1
      $exitcode=0

      while($true){
        #Execute the job, and get the job 
        $job_id=$(curl.exe -s -k -L --header $header1 --header $header2 -X POST "https://${Controller}${templates_launch_api}" -d $payload | ConvertFrom-Json).Job
        Write-Host "Launching Job: https://${Controller}/#/jobs/playbook/${job_id}/output`r`n"

        #Check the job status
        $status="undefined"
        do{
            $status=$(curl.exe -s -k -L --header $header1 --header $header2 -X GET "${templates_api}" | ConvertFrom-Json).Results[0].summary_fields.recent_jobs | Where-Object {$_.Id -eq $job_id} | Select-Object -ExpandProperty Status
                
            Write-Host "Ansible playbook execution ${status}..."
            Start-Sleep -s 10
        }while($status -eq "pending" -or $status -eq "running")

        # Retrieve job output
        $job_output=$(curl.exe -s -k -L --header $header1 --header $header2 -X GET "https://${Controller}${ANSIBLE_JOBS_API}/${job_id}/stdout/?format=txt")
        Write-Host $job_output

        # Retry job if failure.
        if($status -eq "failed") {
            Write-Host "Ansible playbook execution failed!"
            $attempt+=1
            if($attempt -gt 3) {
                $exitcode=1
                break;
            }
            Write-Host "Retrying ansible playbook execution (attempt ${attempt})..."
        } else {
            break;
        }
      }

      return $exitcode
}

###Main Script Function###########
function Main {
[CmdLetBinding()]
param(#Defines the parameters accepted by function
      [Parameter(Mandatory=$false)]
      [string]$v_controller="ansible.apissw.aws.alight.com",        #Default Ansible controller to be used. can be changed while calling the function
      
      [Parameter(Mandatory=$false)]
      [string]$v_inventory="AWS E2 Inventory - Static",             #Default Ansible Inventory to be used. can be changed while calling the function

      [Parameter(Mandatory=$false)]
      [string]$v_platform="windows",                                #Default OS platform. can be changed while calling the function

      [Parameter(Mandatory=$false)]
      [string]$v_role="base"                                        #Default Access Token to be used. can be changed while calling the function
)
    #Get the secret value for use in execution of Functions
    $v_token = Get-Secret

    #Get Host-Details for use in other Functions
    $HostDetail = Get-Ec2InstanceDetails

    Add-EC2ToInventory -Controller $v_controller -inventory $v_inventory -Token $v_token -HostDetail $HostDetail
    Add-EC2ToInventoryGroup -Controller $v_controller -inventory $v_inventory -Token $v_token -Platform $v_platform -HostDetail $HostDetail
    $exitcode=Execute-AnsiblePlaybook -Controller $v_controller -Inventory $v_inventory -Token $v_token -Platform $v_platform -Role $v_role -HostDetail $HostDetail
    RemoveEC2From-Inventory -Controller $v_controller -inventory $v_inventory -Token $v_token -HostDetail $HostDetail

    #returning the playbook execution status code
    exit $exitcode
}
##########################################Main Script Execution Begins ########################################
Main

<#
Alternate Syntax: To change the values
    Main -v_controller <AnsibleController> -v_inventory <AnsibleInventory> -v_platform <windows> -v_token "Bearer token" -v_role <Role>

#If you only want to change the token globally, execute the main function as following. V_Token is a mandatory parameter:
    Main -V_token "Bearer token"

#To only add the host to an inventory:
    Add-EC2ToInventory -Controller $v_controller -inventory $v_inventory -Token $v_token

#To only add the host to platform group
    Add-EC2ToInventoryGroup -Controller $v_controller -inventory $v_inventory -Token $v_token -Platform $v_platform

#To only execute the ansible playbook for the current host
    Execute-AnsiblePlaybook -Controller $v_controller -Inventory $v_inventory -Token $v_token -Platform $v_platform -Role $v_role

#To only remove the host from ansible inventory
    RemoveEC2From-Inventory -Controller $v_controller -inventory $v_inventory -Token $v_token
#>