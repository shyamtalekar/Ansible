##################################################################################
#  Script: ansible-playbook.sh
#  Purpose: Script to execute api call against the aap-controller.
#  Description: Used during ami builds to register the temporary ec2 instance
#               with aap-controller, execute ansible base module run against
#               the specified role, and clean the ami before ami creation.
#
#  CHANGE LOG - (add new entries to the top)
#  Date       Coder        Description
#  ------------------------------------------------------------------------------
#  06/13/2022 a1060612     Initial coding.
###################################################################################

#Adding the certification policy type from builtin libraries
Add-Type @"
using System.Net;
using System.Security.Cryptography.X509Certificates;
public class TrustAllCertsPolicy : ICertificatePolicy {
public bool CheckValidationResult(
ServicePoint srvPoint, X509Certificate certificate,
WebRequest request, int certificateProblem) {
return true;
}
}
"@

#Binding the Certificate policy to the powershell. This will ignore invalid certification errors generated by the api calls made further in the script
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy

#=================================================Essential Variables =================================================#

<#
Get-EC2InstanceDetails

This function returns the hostname and the instance_id of the EC2 instance the script is running on

.PARAMETERS

NONE

SYNTAX

Get-EC2InstanceDetails

.OUTPUT

Returns an object with EC2 instance hostname and instance id

#>
function  Get-EC2InstanceDetails {
    #Access Token
    $access_Token=$(Invoke-RestMethod -Method PUT -Uri "http://169.254.169.254/latest/api/token" -Headers @{"X-aws-ec2-metadata-token-ttl-seconds" = 21600})

    #Hostname of the machine
    $hostname=(Invoke-RestMethod -Headers @{"X-aws-ec2-metadata-token" = $access_token} -Method GET -Uri 'http://169.254.169.254/latest/meta-data/hostname')

    #Get the Instance Id
    $instance_id=$(Invoke-RestMethod -Method GET -Headers @{ "X-aws-ec2-metadata-token"= $access_token} -Uri "http://169.254.169.254/latest/meta-data/instance-id")

    return [pscustomobject]@{
    EC2_HostName=$hostname
    EC2_Instance_Id=$instance_id
    }
}



<#
Add-EC2ToInventory

Adds the EC2 instance to the given Ansible inventory

.PARAMETER Controller

The ansible controller to be used

.PARAMETER Inventory

The Ansible inventory where the instance will be added

.PARAMETER Token

The Bearer Token to be used for executing the api call


#>

function Add-EC2ToInventory {
param([Parameter(Mandatory)]
      [string]$Controller,
      [Parameter(Mandatory)]
      [string]$Inventory,
      [Parameter(Mandatory)]
      [string]$Token
)
    
    $HostDetail=$Global:HostDetail

    Write-Host "Adding EC2 Instance $($HostDetail.EC2_HostName) to inventory $($Inventory).."

    #Headers for the curl request
    $header1= "Content-Type: application/json"
    $header2="Authorization: $($Token)"
    


    #Creating the request body

    $Props=@{
        name=$($HostDetail.EC2_Hostname)
        description="some random thing"
        enabled=$true
        instance_id=$($HostDetail.EC2_Instance_Id)
        inventory=$Inventory
        variables=""
    }
    
    $body=$props | ConvertTo-Json

    $payload=$body.replace('"','\"')
    
    #Getting the Inventory Name in the Format to be used with url. Spaces in the name will be replaced by %20
    $queryString=$Inventory  -replace " ","%20"
    
    #ANSIBLE INVENTORY API

    $ANSIBLE_INVENTORIES_API="/api/v2/inventories"

    #Get the Inventory host api
    $inventory_api="https://$($Controller)$($ANSIBLE_INVENTORIES_API)?name=$($queryString)"

    $inventory_host_api=$(curl.exe -s -k -L --header $header1 --header $header2 -X GET $inventory_api | ConvertFrom-Json).Results.Related.Hosts
        
    #Register the host to the inventory
    
    curl.exe -s -k -L --header $header1 --header $header2 -X POST "https://$($Controller)$($inventory_host_api)" -d $payload 
}


<#
Remove-EC2FromInventory

Remove the EC2 instance from the given Ansible inventory

.PARAMETER Controller

The ansible controller to be used

.PARAMETER Inventory

The Ansible inventory where the instance will be added

.PARAMETER Token

The Bearer Token to be used for executing the api call

#>

function RemoveEC2From-Inventory {
param([Parameter(Mandatory)]
      [string]$Controller,
      [Parameter(Mandatory)]
      [string]$Inventory,
      [Parameter(Mandatory)]
      [string]$Token
)
    
    $HostDetail=$Global:HostDetail

    Write-Host "Unegistering the Host $($HostDetail.EC2_HostName) from inventory $($Inventory).."
    #Headers for the curl request
    $header1= "Content-Type: application/json"
    $header2="Authorization: $($Token)"

    #Getting the Inventory Name in the Format to be used with url. Spaces in the name will be replaced by %20
    $queryString=$Inventory  -replace " ","%20"
   
   #Get the inventory

    #ANSIBLE INVENTORY API

    $ANSIBLE_INVENTORIES_API="/api/v2/inventories"

    #Get the Inventory host api
    $inventory_api="https://$($Controller)$($ANSIBLE_INVENTORIES_API)?name=$($queryString)"

    $inventory_host_api=$(curl.exe -s -k -L --header $header1 --header $header2 -X GET $inventory_api | ConvertFrom-Json).Results.Related.Hosts
        
    #Get the inventory Id of the host
    $inventory_id=$(curl.exe -s -k -L --header $header1 --header $header2 -X GET "https://$($Controller)$($inventory_host_api)" | ConvertFrom-Json).Results | Where-Object {$_.Name -eq $HostDetail.EC2_HostName} | Select -ExpandProperty Id
    
    #If the inventory Id is not found, return the message that the host not found in inventory

    if(!$inventory_id){
        Write-Host "Host $($HostDetail.EC2_HostName) not found in the ansible inventory $($Inventory), or could not get the host Id."
        return
    }
    else{
        #If the host id found, proceed to unregistreing from inventory

        Write-Host "Host $($HostDetail.EC2_HostName) found in the ansible inventory $($Inventory). Proceeding with removing.."

        #Creating the request body
        $Props=@{
            id=$inventory_id
            disassociate=$true
        }

        $body=$props | ConvertTo-Json

        $payload=$body.replace('"','\"')

        #Unregister the host from the inventory
        curl.exe -s -k -L --header $header1 --header $header2 -X POST "https://$($Controller)$($inventory_host_url)" -d $payload 
    }
}


<#
Add-EC2ToInventoryGroup

.SYNOPSIS
Adds the EC2 host to the platform group

.DESCRIPTION

Adds the EC2 Host to the ansible platform group based on OS type. Accepts ansible Controller, Ansible Inventory, Access Token and Platform Name as parameters.

.PARAMETER Controller

The ansible controller to be used

.PARAMETER Inventory

The Ansible inventory where the instance will be added

.PARAMETER Token

The Bearer Token to be used for executing the api call

.PARAMETER Platform

OS Platform to be used. this will be used to determine the ansible group, where host will be placed

USAGE:

Add-EC2ToInventoryGroup -Controller <ansibleController> -Inventory <AnsibleInventory> -Token <Bearer TOken> -Platform <Windows>
#>
function Add-EC2ToInventoryGroup {
 param(
      [Parameter(Mandatory)]
      [string]$Controller,
      [Parameter(Mandatory)]
      [string]$Inventory,
      [Parameter(Mandatory)]
      [string]$Token,
      [Parameter(Mandatory=$false)]
      [string]$Platform="windows"
)

  #Ansible Groups APi endpoint

  $ANSIBLE_GROUPS_API="/api/v2/groups"

  $HostDetail=$Global:HostDetail

  Write-Host "Associating $($HostDetail.EC2_Hostname) to $("platform_"+$Platform) group..."

  #curl request headers
    $header1= "Content-Type: application/json"
    $header2="Authorization: $($Token)"

  # Retrieve associated groups api path.
  $groups_api="https://$($Controller)$($ANSIBLE_GROUPS_API)?name=platform_$($Platform)"

  $groups_hosts_api=$(curl.exe -s -k -L --header $header1 --header $header2 -X GET "$($groups_api)") | ConvertFrom-Json
  $groups_hosts_api=($groups_hosts_api.results | Where-Object {$_.Summary_fields.inventory.Name -eq $Inventory}).related.hosts

  # Add ec2 to group
  $body=@{
    name=$HostDetail.EC2_HostName
  }

  $body=$body | ConvertTo-Json
  
  $payload=$body.replace('"','\"')

  curl.exe -s -k -L --header $header1 --header $header2 -X POST "https://$($Controller)$($groups_hosts_api)" -d $payload
}


function Execute-AnsiblePlaybook {
param(
      [Parameter(Mandatory)]
      [string]$Controller,
      [Parameter(Mandatory)]
      [string]$Inventory,
      [Parameter(Mandatory)]
      [string]$Token,
      [Parameter(Mandatory=$false)]
      [string]$Platform="windows",
      [Parameter(Mandatory)]
      [string]$Role
)
      #form the template name
      $template="$($Role)-$($Platform)-template"

      #hardcoded template name: will be changed later

      $template="AMI-Windows-Base"


      #Curl request headers
      $header1= "Content-Type: application/json"
      $header2="Authorization: $($Token)"

      $ANSIBLE_JOB_TEMPLATES_API="/api/v2/job_templates"
      $ANSIBLE_JOBS_API="/api/v2/jobs"

      $templates_api="https://$($Controller)$($ANSIBLE_JOB_TEMPLATES_API)?name=$($template)"
      $templates_launch_api=$(curl.exe -s -k -L --header $header1 --header $header2 -X GET "$($templates_api)"| COnvertfrom-Json).Results.Related.Launch 
      echo "Template Launch API: $($templates_launch_api)"

      $body=@{
      limit=$HostDetail.EC2_HostName
      extra_vars=@{
            base_ami_build=$true
        }
      } | ConvertTo-Json
      $payload=$body.replace('"','\"')

      #Number of times to retry the job
      $attempt=1

      while($attempt -le 3){
        Write-Host "Trying to execute job: Attempt #$($attempt)"
        #Execute the job, and get the job 
        $job_id=$(curl.exe -s -k -L --header $header1 --header $header2 -X POST "https://$($Controller)$($templates_launch_api)" -d $payload | ConvertFrom-Json).Job

        if($job_id){
            Write-Host "Launched Job: https://$($Controller)/#/jobs/playbook/$($job_id)/output"

            #Check the job status

            $status="undefined"
            do{
                $status=$(curl.exe -s -k -L --header $header1 --header $header2 -X GET "$($templates_api)" | ConvertFrom-Json).Results[0].summary_fields.recent_jobs | Where-Object {$_.Id -eq $job_id} | Select -ExpandProperty Status
                
                Write-Host "Ansible playbook execution status: $($status)"
                Sleep -s 10
            }while($status -eq "pending" -or $status -eq "running")

            if($status -eq "failed"){
                #Retry the job if the status is failed
                $job_id=$(curl.exe -s -k -L --header $header1 --header $header2 -X POST "https://$($Controller)$($templates_launch_api)" -d $payload | ConvertFrom-Json).Job
                $attempt+=1
            }
         }else{
            Write-Host "Failed Invoking the Job"
            $attempt+=1
         }
      }
}



###Main Script Function###########
function Main {
[CmdLetBinding()]
param(#Defines the parameters accepted by function
      [Parameter(Mandatory=$false)]
      [string]$v_controller="ansible.apissw.aws.alight.com",      #Default Ansible controller to be used. can be changed while calling the function
      
      [Parameter(Mandatory=$false)]
      [string]$v_inventory="AWS E2 Inventory - Static",           #Default Ansible Inventory to be used. can be changed while calling the function

      [Parameter(Mandatory=$false)]
      [string]$v_platform="windows",                                  #Default OS platform. can be changed while calling the function
      
      [Parameter(Mandatory=$false)]
      [string]$v_token="Bearer 3XNYexnwTF3pGArqopgOiRLwEMjsoO",            #Default Access Token to be used. can be changed while calling the function

      [Parameter(Mandatory=$false)]
      [string]$v_role="Base"            #Default Access Token to be used. can be changed while calling the function

)
    #get the host detail, and set as a global variable

    $HostDetail=$Global:HostDetail

    Add-EC2ToInventory -Controller $v_controller -inventory $v_inventory -Token $v_token
    Add-EC2ToInventoryGroup -Controller $v_controller -inventory $v_inventory -Token $v_token -Platform $v_platform
    Execute-AnsiblePlaybook -Controller $v_controller -Inventory $v_inventory -Token $v_token -Platform $v_platform -Role $v_role
    RemoveEC2From-Inventory -Controller $v_controller -inventory $v_inventory -Token $v_token

    return $LASTEXITCODE
}


##########################################Main Script Execution Begins ########################################
#To execute the script with default optional parameters
Main

<#
Alternate Syntax: To change the values

Main -v_controller <AnsibleController> -v_inventory <AnsibleInventory> -v_platform <windows> -v_token "Bearer token" -v_role <Role>

#If you only want to change the token globally, execute the main function as following:
Main -V_token "Bearer token

#To only add the host to an inventory:

    Add-EC2ToInventory -Controller $v_controller -inventory $v_inventory -Token $v_token

#To only add the host to platform group

    Add-EC2ToInventoryGroup -Controller $v_controller -inventory $v_inventory -Token $v_token -Platform $v_platform

#To only execute the ansible playbook for the current host
    Execute-AnsiblePlaybook -Controller $v_controller -Inventory $v_inventory -Token $v_token -Platform $v_platform -Role $v_role

#To only remove the host from ansible inventory

    RemoveEC2From-Inventory -Controller $v_controller -inventory $v_inventory -Token $v_token


#>